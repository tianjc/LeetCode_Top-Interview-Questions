public class Solution {
  //递归实现中序遍历，本质上是利用了系统栈先进后出的性质
  //构建一个栈来模拟这个过程
  //注意先进后出，即先访问右节点再左节点
	private class Command {
		private String s;
		private TreeNode treeNode;
 
		public Command(String s, TreeNode treeNode) {
			this.s = s;
			this.treeNode = treeNode;
		}
	}
 
	public List<Integer> inorderTraversal(TreeNode root) {
		List<Integer> list = new ArrayList<>();
		if(root == null) {
			return list;
		}
		Stack<Command> stack = new Stack<>();
		stack.push(new Command("go", root));
		while(!stack.isEmpty()) {
			Command command = stack.pop();
			if("visit".equals(command.s)) {
				list.add(command.treeNode.val);
			}
			if("go".equals(command.s) && command.treeNode != null) {
				stack.push(new Command("go", command.treeNode.right));
				stack.push(new Command("visit", command.treeNode));		
				stack.push(new Command("go", command.treeNode.left));
			}
		}
		return list;
	}
}
